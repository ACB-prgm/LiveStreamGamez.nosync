[gd_scene load_steps=19 format=2]

[ext_resource path="res://Images/Grid.png" type="Texture" id=1]
[ext_resource path="res://Scenes/Main.gd" type="Script" id=2]
[ext_resource path="res://Images/circle.png" type="Texture" id=3]
[ext_resource path="res://Images/Circle_shadow.png" type="Texture" id=4]
[ext_resource path="res://Images/IntermissionImages.png" type="Texture" id=5]
[ext_resource path="res://Images/circle_shadow_noshadow.png" type="Texture" id=6]
[ext_resource path="res://Images/IntermissionImages_5.png" type="Texture" id=7]
[ext_resource path="res://Images/IntermissionImages_6.png" type="Texture" id=8]
[ext_resource path="res://Images/IntermissionImages_03.png" type="Texture" id=9]
[ext_resource path="res://Images/IntermissionImages_2.png" type="Texture" id=10]
[ext_resource path="res://Images/IntermissionImages_4.png" type="Texture" id=11]

[sub_resource type="ShaderMaterial" id=1]

[sub_resource type="Shader" id=2]
code = "// Hey this is Hei! This shader \"fakes\" a 3D-camera perspective on CanvasItems.
// License: MIT

shader_type canvas_item;

// Camera FOV
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
uniform float y_rot : hint_range(-180, 180) = 0.0;
uniform float x_rot : hint_range(-180, 180) = 0.0;
// At 0, the image retains its size when unrotated.
// At 1, the image is resized so that it can do a full
// rotation without clipping inside its rect.
uniform float inset : hint_range(0, 1) = 0.0;
// Consider changing this to a uniform and changing it from code

varying flat vec2 o;
varying vec3 p;

const float PI = 3.14159;

// Creates rotation matrix
void vertex(){
	float sin_b = sin(y_rot / 180.0 * PI);
	float cos_b = cos(y_rot / 180.0 * PI);
	float sin_c = sin(x_rot / 180.0 * PI);
	float cos_c = cos(x_rot / 180.0 * PI);
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;

	VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment(){
	if (cull_back && p.z <= 0.0) discard;
	vec2 uv = (p.xy / p.z).xy - o;
    COLOR = texture(TEXTURE, uv + 0.5);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/fov = 90.0
shader_param/cull_back = true
shader_param/y_rot = 0.0
shader_param/x_rot = 18.0
shader_param/inset = 0.0

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

void fragment(){
	
	vec4 color = vec4(texture(SCREEN_TEXTURE, SCREEN_UV).rgb, texture(TEXTURE, UV).a);
	
	COLOR = vec4(1.0 - color.rgb,  color.a);
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;

uniform sampler2D texture_mask;

void fragment() {
    vec2 uv = SCREEN_UV;

    // Flip the Y coordinate to avoid flipping the texture
    uv.y = 1.0 - uv.y;

    // Get the color value from the base texture
    vec4 color = texture(TEXTURE, uv);

    // Get the mask value from the mask texture
    vec4 mask = texture(texture_mask, uv);

    // Multiply the color by the mask value to create the masked effect
    color *= mask;

    COLOR = color;
}
"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/texture_mask = ExtResource( 6 )

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 2 )

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 1 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )

[node name="TextureRect" type="TextureRect" parent="."]
material = SubResource( 3 )
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -1440.0
margin_top = -810.0
margin_right = 1440.0
margin_bottom = 810.0
texture = ExtResource( 1 )

[node name="Tween" type="Tween" parent="."]

[node name="Circle" type="TextureRect" parent="."]
material = SubResource( 5 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 3 )
expand = true
stretch_mode = 6

[node name="CenterCircle" type="TextureRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 4 )
expand = true
stretch_mode = 6

[node name="IntermissionImages6" type="TextureRect" parent="."]
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 8 )
expand = true
stretch_mode = 6

[node name="IntermissionImages5" type="TextureRect" parent="."]
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 7 )
expand = true
stretch_mode = 6

[node name="IntermissionImages4" type="TextureRect" parent="."]
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 11 )
expand = true
stretch_mode = 6

[node name="IntermissionImages3" type="TextureRect" parent="."]
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 9 )
expand = true
stretch_mode = 6

[node name="IntermissionImages2" type="TextureRect" parent="."]
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 10 )
expand = true
stretch_mode = 6

[node name="IntermissionImages" type="TextureRect" parent="."]
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 5 )
expand = true
stretch_mode = 6

[connection signal="tween_all_completed" from="Tween" to="." method="_on_Tween_tween_all_completed"]
